#!/usr/bin/env python

import os
from pathlib import Path
from inference_pipeline.utils import infer_from_model, maybe_download_parameters, get_config, get_ckpt_path
from inference_pipeline.preprocess import preprocess, to_patient_space
import yaml

def main():

    import argparse
    parser = argparse.ArgumentParser(description="Run brainPETNR on a single PET file")
    parser.add_argument("-pet", type=str, required=True, help="PET input file")
    parser.add_argument("-ct", type=str, required=False, help="CT input file")
    parser.add_argument("-out", type=str, required=True, help="Output denoised PET file")
    parser.add_argument('-model', type=str, required=True, help='Select the denoising model [PiB or PE2I]')
    parser.add_argument('--use_hdbet', action='store_true')
    args = parser.parse_args()
    
    assert args.model in ('PE2I', 'PiB', 'PiB_5min')
    if args.model == 'PE2I':
        model = 'PE2I_5pct_30sec'
        config_name = 'PE2I'
    elif args.model.startswith('PiB'):
        model = 'PiB_5pct_1min' if args.model == 'PiB' else 'PiB_25pct_5min'
        config_name = 'PiB'

    # Download model weights
    maybe_download_parameters()

    # Load config
    config_file = get_config(config_name)
    with open(config_file) as cf:
        configs = yaml.safe_load(cf)
    # Replace with actual model
    configs['best_model'] = get_ckpt_path(model)

    if args.ct is None:
        infer_from_model(args.pet, configs, out_file=args.out)
    else:
        PET, BET_mask = preprocess(args.pet, args.ct, use_hdctbet=args.use_hdbet)
        denoised_mni_space = os.path.join(os.path.dirname(args.pet), 'denoised_MNIspace.nii.gz')
        infer_from_model(PET, configs, out_file=denoised_mni_space)
        to_patient_space(
            denoised_mni_space, 
            args.pet.replace('.nii.gz', '_to_avg.nii.gz'), 
            BET_mask, 
            args.pet, 
            args.out)
    
if __name__ == "__main__":
    main()
